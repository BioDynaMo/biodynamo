#!/usr/bin/env bash
# -*- sh-indentation: 3 -*-
# This script returns the machine dependent compile options needed
# to compile and link applications using the BDM libraries.
#
# Author: Fons Rademakers, 16/05/2019

readlink=readlink

# work around readlink versions not having -f option
fullpath1=`$readlink $0`
if [ "$?" -ne "0" ]; then
   fullpath1=$0
else
   if [ ${fullpath1##/} = $fullpath1 ] && [ ${fullpath1##~} = $fullpath1 ]; then
      # relative path, prepend directory where executable was found
      lpath=`dirname $0`
      fullpath1=$lpath/$fullpath1
   fi
fi
progdir=`dirname $fullpath1`
runningdir=`pwd`
if [ ${progdir##/} != $progdir ] || [ ${progdir##~} != $progdir ]; then
   # absolute path
   fullpath=$progdir
else
   # relative path
   if [ $progdir != "." ]; then
      fullpath=$runningdir/$progdir
   else
      fullpath=$runningdir
   fi
fi
# work around readlink versions not having -f option
fullpath1=`$readlink $fullpath`
if [ "$?" -ne "0" ]; then
   fullpath1=$fullpath
fi
BDMSYS=`dirname $fullpath1`

arch=@DETECTED_OS_VERSION@
platform=@DETECTED_OS_TYPE@
bindir=@CMAKE_INSTALL_BINDIR@
libdir=@CMAKE_INSTALL_LIBDIR@
incdir=@CMAKE_INSTALL_INCLUDEDIR@
etcdir=@etcdir@
tutdir=@tutdir@
features="@CMAKE_CXX_FLAGS@"
configargs="@configargs@"
altcc="@C@"
altcxx="@CXX@"
altf77="@altf77@"
altld="@CMAKE_LINKER@"

if test "$platform" = "win32"; then
   if [ "x$BDMSYS" != "x" ]; then
      unixBDMSYS=`cygpath -u $BDMSYS`
   else
      unixBDMSYS=.
   fi
   bindir=$unixBDMSYS/bin
   libdir=$unixBDMSYS/lib
   incdir=$unixBDMSYS/include
   etcdir=$unixBDMSYS/etc
fi

### BDM libraries ###

bdmlibs="-lCore -lMultiProc"

### machine dependent settings ###

# Set the C++ standard version
cxxversionflag="@configstd@ "

case $arch in
linux)
   # Linux with gcc >= 3.x
   auxcflags="${cxxversionflag} -m32 -msse -mfpmath=sse "
   auxldflags="-m32 -msse -mfpmath=sse "
   auxlibs="-lm -ldl -rdynamic"
   ;;
linuxicc)
   # Linux with the Intel icc compiler
   auxcflags="${cxxversionflag}"
   auxlibs="-limf -lm -ldl"
   ;;
linuxx8664gcc)
   # AMD Opteron and Intel EM64T (64 bit mode) Linux with gcc 3.x
   auxcflags="${cxxversionflag} -m64"
   auxldflags="-m64"
   auxlibs="-lm -ldl -rdynamic"
   ;;
linuxx8664icc)
   # AMD Opteron and Intel EM64T (64 bit mode) Linux with Intel icc
   auxcflags="${cxxversionflag}"
   auxlibs="-limf -lm -ldl"
   ;;
linuxarm64)
   # ARMv8-A (AArch64) Linux with gcc
   auxcflags="${cxxversionflag} -fsigned-char"
   auxlibs="-lm -ldl -rdynamic"
   ;;
freebsd4)
   # FreeBSD 4 with glibc
   auxcflags="${cxxversionflag}"
   auxlibs="-lm -lstdc++"
   ;;
macosxicc)
   # MacOS X with Intel icc compiler
   macosx_minor=`sw_vers | sed -n 's/ProductVersion://p' | cut -d . -f 2`
   auxcflags="${cxxversionflag}"
   auxlibs="-lm -ldl"
   ;;
macosx64)
   # MacOS X with gcc (GNU cc v4.x) in 64 bit mode
   macosx_minor=`sw_vers | sed -n 's/ProductVersion://p' | cut -d . -f 2`
   auxcflags="${cxxversionflag} -m64"
   auxldflags="-m64"
   auxlibs="-lm -ldl"
   ;;
win32gcc | win64gcc)
   # Windows (32 or 64) with cygwin gcc
   auxcflags="-std=gnu++11"
   auxlibs=
   ;;
*)
   echo "bdm-config: \"$arch\" invalid architecture"
   echo "Please report to biodynamo-talk@cern.ch"
   #exit 1
   ;;
esac


### compiler dependent settings ###

case $arch in
freebsd* | openbsd* | linux*)
   for f in $features ; do
      if test "x$f" = "xthread" ; then
         auxcflags="-pthread $auxcflags"
         auxlibs="-pthread $auxlibs"
      fi
      if test "x$f" = "xrpath" ; then
         auxlibs="-Wl,-rpath,$libdir $auxlibs"
      fi
      if test "x$f" = "xlibcxx" ; then
         auxcflags="-stdlib=libc++ $auxcflags"
         auxlibs="-stdlib=libc++ $auxlibs"
      fi
   done
   ;;
macosx*)
   for f in $features ; do
      if test "x$f" = "xthread" ; then
         if [ $macosx_minor -ge 5 ]; then
            auxcflags="-pthread $auxcflags"
            auxlibs="-lpthread $auxlibs"
         else
            auxcflags="-D_REENTRANT $auxcflags"
            auxlibs="-lpthread $auxlibs"
         fi
      fi
      if test "x$f" = "xrpath" ; then
         if [ $macosx_minor -ge 5 ]; then
            auxlibs="-Wl,-rpath,$libdir $auxlibs"
         fi
      fi
      if test "x$f" = "xlibcxx" ; then
         auxcflags="-stdlib=libc++ $auxcflags"
         auxlibs="-stdlib=libc++ $auxlibs"
      fi
   done
   ;;
win32)
   ;;
*)
   for f in $features ; do
      if test "x$f" = "xthread" ; then
         auxcflags="-D_REENTRANT $auxcflags"
         auxlibs="-lpthread $auxlibs"
      fi
   done
   ;;
esac

# allocator must be last in auxlibs
for f in $features ; do
   if test "x$f" = "xalloc" ; then
      auxlibs="$auxlibs @alloclibdir@ @alloclib@"
   fi
done

auxcflags="$auxcflags @usercflags@"

### end of machine and compiler dependent settings ###

srcdir=@top_srcdir@
prefix=@prefix@
if test "$platform" = "win32" && test "$prefix" != ""; then
   prefix=`cygpath -u $prefix`
fi
exec_prefix=${prefix}
exec_prefix_set=no
libsout=no
glibsout=no
noauxlibs=no
noauxcflags=no
noldflags=no

usage="\
Usage: bdm-config [--prefix[=DIR]] [--exec-prefix[=DIR]] [--version]\
 [--cflags] [--auxcflags] [--ldflags] [--libs] [--glibs]\
 [--bindir] [--libdir] [--incdir] [--etcdir] [--tutdir] [--srcdir]\
 [--noauxcflags] [--noauxlibs] [--noldflags] [--has-<feature>] [--arch]\
 [--platform] [--config] [--features] [--ncpu] [--git-revision]\
 [--cc] [--cxx] [--f77] [--ld ] [--help]"

if test $# -eq 0; then
   echo "${usage}" 1>&2
   exit 1
fi

out=""

while test $# -gt 0; do
  case "$1" in
  -*=*) optarg=`echo "$1" | sed 's/[-_a-zA-Z0-9]*=//'` ;;
  *)    optarg= ;;
  esac

  case $1 in
    --arch)
      ### Output the arcitecture (compiler/OS combination)
      out="$out $arch"
      ;;
    --platform)
      ### Output the platform (OS)
      out="$out $platform"
      ;;
    --has-*)
      ### Check for feature
      f=`echo $1 | sed 's/--has-//'`
      for c in $features ; do
         if test "x$c" = "x$f" ; then
            out="$out yes"
            break
         fi
         c=""
      done
      if test "x$c" = "x" ; then
         out="$out no"
      fi
      ;;
    --prefix=*)
      ### Set the prefix
      if test "$platform" = "win32"; then
         ### We need to expand the path to backslash seperated path
         optarg=`cygpath -u $optarg`
      fi
      prefix=$optarg
      bindir=${prefix}/bin
      libdir=${prefix}/lib
      incdir=${prefix}/include
      if test $exec_prefix_set = no ; then
         exec_prefix=$optarg
      fi
      ;;
    --prefix)
      ### Output the prefix
      out="$out $prefix"
      ;;
    --exec-prefix=*)
      ### Set the exec-prefix
      if test "$platform" = "win32"; then
      ### We need to expand the path to backslash seperated path
         optarg=`cygpath -u $optarg`
      fi
      exec_prefix=$optarg
      exec_prefix_set=yes
      bindir=${exec_prefix}/bin
      libdir=${exec_prefix}/lib
      ;;
    --exec-prefix)
      ### Output the exec-prefix
      out="$out $prefix"
      ;;
    --noauxlibs)
      noauxlibs="yes"
      ;;
    --noauxcflags)
      noauxcflags="yes"
      ;;
    --noldflags)
      noldflags="yes"
      ;;
    --version)
      ### Output the version number.  If RVersion.h can not be found, give up.
      if test -r ${incdir}/version.h; then
         out="$out `sed -n 's,.*BDM_RELEASE *\"\(.*\)\".*,\1,p' < ${incdir}/version.h`"
      else
         echo "cannot read ${incdir}/version.h"
         exit 1
      fi
      ;;
    --git-revision)
      ### Output the git revision number.  If RGitCommit.h can not be found, give up.
      if test -r ${incdir}/RGitCommit.h; then
         out="$out `sed -n 's,.*BDM_GIT_COMMIT *\"\(.*\)\".*,\1,p' < ${incdir}/RGitCommit.h`"
      else
         echo "cannot read ${incdir}/RGitCommit.h"
         exit 1
      fi
      ;;
    --cflags)
      ### Output the compiler flags
      if test ${incdir} != /usr/include; then
         ### In case we're on a Win32 system, we need to expand the
         ### path to a backslash seperated path
         if test "$platform" = "win32"; then
            includes=-I\'`cygpath -w ${incdir}`\'
         else
            includes=-I${incdir}
         fi
      fi
      if test "x$noauxcflags" = "xyes" ; then
         out="$out $includes"
      else
         out="$out ${auxcflags} $includes"
      fi
      ;;
   --auxcflags)
      ### Output auxiliary compiler flags
      out="$out $auxcflags"
      ;;
    --ldflags)
      ### Output linker flags
      out="$out $auxldflags"
      ;;
    --libs)
      ### Output regular BDM libraries.  If the user said --glibs --libs,
      ### we've already output the libraries, so we skip this section
      if test "x$libsout" = "xyes" ; then
         shift
         continue
      fi
      ### Set the flag
      libsout="yes"
      libs=${bdmlibs}
      ### If we're on a win32 system, we need to change the -l prefix
      ### into a .lib suffix, and expand the paths to a backslash
      ### separated path.
      if test "$platform" = "win32"; then
         nlibs=`echo $libs | sed "s@-l\([a-zA-Z0-9]*\)@${libdir}/lib\1.lib@g"`
         libs=
         for i in $nlibs; do
            libs="$libs '`cygpath -w $i`'"
         done
      else
         if test "x$noldflags" = "xno" ; then
            out="$out -L${libdir}"
         fi
      fi
      if test "x$noauxlibs" = "xyes" ; then
         out="$out $forcelibs $libs"
      else
         out="$out $forcelibs $libs ${auxlibs}"
      fi
      ;;
    --glibs)
      ### Output graphics and normal libraries.
      ### Set the flag
      glibsout="yes"
      ### If the user said --libs --glibs, we don't need to add the
      ### regular BDM libraries.
      glibsonly="no"
      if test "x$libsout" = "xno" ; then
         ### Set the flag
         libsout="yes"
         glibs="${bdmglibs} ${bdmlibs}"
      else
         glibs="${bdmglibs}"
         glibsonly="yes"
      fi
      ### If we're on a win32 system, we need to change the -l prefix
      ### into a .lib suffix, and expand the paths to a backslash
      ### separated path.
      if test "$platform" = "win32"; then
         nlibs=`echo $glibs | sed "s@-l\([a-zA-Z0-9]*\)@${libdir}/lib\1.lib@g"`
         glibs=
         for i in $nlibs; do
            glibs="$glibs '`cygpath -w $i`'"
         done
      else
        if test "x$noldflags" = "xno" ; then
           out="$out -L${libdir}"
        fi
      fi
      if test "x$glibsonly" = "xyes" ; then
         out="$out $forceglibs $glibs"
      else
         if test "x$noauxlibs" = "xyes" ; then
            out="$out $forcelibs $forceglibs $glibs"
         else
            out="$out $forcelibs $forceglibs $glibs ${auxlibs}"
         fi
      fi
      ;;
    --auxlibs)
      ### output the auxiliary libraries
      out="$out $auxlibs"
      ;;
    --bindir)
      ### output the executable directory
      out="$out $bindir"
      ;;
    --libdir)
      ### output the library directory
      out="$out $libdir"
      ;;
    --incdir)
      ### output the header directory
      out="$out $incdir"
      ;;
    --etcdir)
      ### output the etc directory
      out="$out $etcdir"
      ;;
    --tutdir)
      ### output the tutorials directory
      out="$out $tutdir"
      ;;
    --srcdir)
      ### output the src directory
      out="$out $srcdir"
      ;;
    --config)
      ### output the configure arguments
      out="$out $configargs"
      ;;
    --features)
      ### output all supported features
      out="$out$features"  # no space, features starts with space
      ;;
    --ncpu)
      ### number of available cores
      ncpu=1
      case $arch in
      freebsd* | openbsd* | linux*)
         ncpu=$(awk '/^processor/ {++n} END {print n}' /proc/cpuinfo)
         ;;
      macosx*)
         ncpu=$(sysctl -n hw.ncpu)
         ;;
      aix*)
         ncpu=$(prtconf | grep 'Number Of Processors' | awk '{ print $4 }')
         ;;
      solaris*)
         ncpu=$(kstat cpu_info | grep core_id | awk '{ print $2}' | uniq | wc -l)
         ;;
      win32)
         ;;
      *)
         ;;
      esac
      out="$out $ncpu"
      ;;
    --cc)
      ### output used C compiler
      out="$out $altcc"
      ;;
    --cxx)
      ### output used C++ compiler
      out="$out $altcxx"
      ;;
    --f77)
      ### output used Fortran compiler
      out="$out $altf77"
      ;;
    --ld)
      ### output used Linker
      out="$out $altld"
      ;;
    --help)
      ### Print a help message
      echo "Usage: `basename $0` [options]"
      echo ""
      echo "  --arch                Print the architecture (compiler/OS)"
      echo "  --platform            Print the platform (OS)"
      echo "  --prefix[=dir]        Print or set prefix"
      echo "  --exec-prefix[=dir]   Print or set execution prefix"
      echo "  --libs                Print regular BDM libraries"
      echo "  --glibs               Print regular + GUI BDM libraries"
      echo "  --cflags              Print compiler flags and header path"
      echo "  --ldflags             Print linker flags"
      echo "  --bindir              Print the executable directory"
      echo "  --libdir              Print the library directory"
      echo "  --incdir              Print the header directory"
      echo "  --etcdir              Print the configuration directory"
      echo "  --tutdir              Print the tutorials directory"
      echo "  --srcdir              Print the top of the original source directory"
      echo "  --auxlibs             Print auxiliary libraries"
      echo "  --auxcflags           Print auxiliary compiler flags"
      echo "  --noauxlibs           Do not print auxiliary/system libraries"
      echo "  --noauxcflags         Do not print auxiliary compiler flags"
      echo "  --noldflags           Do not print linker flags"
      echo "  --config              Print arguments used for configuration with CMake"
      echo "  --features            Print list of all supported features"
      echo "  --has-<feature>       Test if <feature> is compiled in"
      echo "  --version             Print the BDM version"
      echo "  --git-revision        Print the BDM git revision number"
      echo "  --ncpu                Print number of available (hyperthreaded) cores"
      echo "  --cc                  Print alternative C compiler specified when BDM was built"
      echo "  --cxx                 Print alternative C++ compiler specified when BDM was built"
      echo "  --f77                 Print alternative Fortran compiler specified when BDM was built"
      echo "  --ld                  Print alternative Linker specified when BDM was built"
      echo "  --help                Print this message"
      exit 0
      ;;
    *)
      ### Give an error
      echo "Unknown argument \"$1\"!" 1>&2
      echo "${usage}" 1>&2
      exit 1
      ;;
  esac
  shift
done

### Output the stuff
echo $out
