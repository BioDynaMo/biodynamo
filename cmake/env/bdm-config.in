#!/usr/bin/env bash
# -*- sh-indentation: 3 -*-
# This script returns the machine dependent compile options needed
# to compile and link applications using the BDM libraries.
#
# Author: Fons Rademakers, 16/05/2019

readlink=readlink

# work around readlink versions not having -f option
fullpath1=`$readlink $0`
if [ "$?" -ne "0" ]; then
   fullpath1=$0
else
   if [ ${fullpath1##/} = $fullpath1 ] && [ ${fullpath1##~} = $fullpath1 ]; then
      # relative path, prepend directory where executable was found
      lpath=`dirname $0`
      fullpath1=$lpath/$fullpath1
   fi
fi
progdir=`dirname $fullpath1`
runningdir=`pwd`
if [ ${progdir##/} != $progdir ] || [ ${progdir##~} != $progdir ]; then
   # absolute path
   fullpath=$progdir
else
   # relative path
   if [ $progdir != "." ]; then
      fullpath=$runningdir/$progdir
   else
      fullpath=$runningdir
   fi
fi
# work around readlink versions not having -f option
fullpath1=`$readlink $fullpath`
if [ "$?" -ne "0" ]; then
   fullpath1=$fullpath
fi
BDMSYS=`dirname $fullpath1`

split_lib_path() {
   # Split absolute library path [$1], e.g. /path/to/dir/libmylib.so
   # into $found_dir, -L/path/to/dir, and $found_lib, -lmylib.

   # Assert we got an argument
   if [ $# -ne 1 ]; then
      echo "split_lib_path: wrong number of arguments"
      return 1
   fi

   libpath=$1

   found_dir=-L$(dirname $libpath)
   found_lib=$(basename $libpath | sed 's|^lib\(.*\)\..*|-l\1|')
}

split_multiple_lib_path() {
   # Split list of library paths [$1], e.g. path1;path2
   # into $found_libs, "-L/path1 -llib1 -Lpath2 -llib2.

   # Assert we got an argument
   if [ $# -ne 1 ]; then
      echo "split_multiple_lib_path: wrong number of arguments"
      return 1
   fi

   libpaths=$1
   IFS=';' read -ra mylibpaths <<<"$libpaths"

   found_libs=
   for i in ${mylibpaths[@]}; do
      split_lib_path $i
      found_libs="$found_libs $found_dir $found_lib"
   done
}

arch=@architecture@
platform=@platform@
rootvers=@rootvers@
bindir=@bindir@
libdir=@libdir@
incdir=@incdir@
cmakedir=@cmakedir@
cxx="@altcxx@"
ld="@altld@"
cxxflags="@cxxflags@"
cxxstd=@cxxstd@
cxxflagsdebug="@cxxflagsdebug@"
cxxflagsrelease="@cxxflagsrelease@"
cxxdefines="@cxxdefines@"
ldflags="@ldflags@"
soflags="@soflags@"
socreatecxxflags="@socreatecxxflags@"
cmakeinvoke="@cmakeinvoke@"
configargs="@configargs@"
omplibs="@omplibs@"
fpprecision="@BDM_CONFIG_REALT@"

### BDM libraries ###

bdmlibs="-lbiodynamo"

### machine dependent settings ###

# Set the C++ standard version
cxxversionflag="-std=c++${cxxstd}"

### end of machine and compiler dependent settings ###

usage="\
Usage: bdm-config [--version] [--root-version]\
 [--debug] [--opt] [--cxxflags] [--cxxincludes]\
 [--ldflags] [--libs] [--bindir] [--libdir] [--incdir]\
 [--cxx] [--ld ] [--cmakedir] [--cmake-invoke] [--config]\
 [--arch] [--platform] [--ncpu] [--fp-precision] [--help]"

if test $# -eq 0; then
   echo "${usage}" 1>&2
   exit 1
fi

out=""

while test $# -gt 0; do
  case "$1" in
  -*=*) optarg=`echo "$1" | sed 's/[-_a-zA-Z0-9]*=//'` ;;
  *)    optarg= ;;
  esac

  case $1 in
    --arch)
      ### Output the arcitecture (compiler/OS combination)
      out="$out $arch"
      ;;
    --platform)
      ### Output the platform (OS)
      out="$out $platform"
      ;;
    --version)
      ### Output the version number.  If RVersion.h can not be found, give up.
      if test -r ${incdir}/bdm_version.h; then
         out="$out `sed -n 's,.*BDM_RELEASE *\"\(.*\)\".*,\1,p' < ${incdir}/bdm_version.h`"
      else
         echo "cannot read ${incdir}/bdm_version.h"
         exit 1
      fi
      ;;
    --root-version)
      ### Output the ROOT version number used to build BDM with.
      out="$out $rootvers"
      ;;
    --cxxflags)
      ### Output the compiler flags
      if test ${incdir} != /usr/include; then
         includes=-I${incdir}
      fi
      out="$out $includes $cxxdefines $cxxversionflag $cxxflags $cxxoptflags $cxxdebflags $(root-config --cflags)"
      ;;
    --cxxincludes)
      ### Output only the include flags for BioDynaMo headers
      if test ${incdir} != /usr/include; then
         includes=-I${incdir}
      fi
      out="$out $includes $(root-config --noauxcflags --cflags)"
      # local omp directory needed for rootcling (used in bdm-code-generation)
      out="$out -I${incdir}/../omp"
      ;;
    --cxxdefines)
      ### Output only the C++ define flags for BioDynaMo headers
      out="$out $cxxdefines"
      ;;
    --ldflags)
      ### Output linker flags
      out="$out $ldflags $cxxflags $cxxoptflags $cxxdebflags $(root-config --ldflags)"
      ;;
    --libs)
      if test ${libdir} != /usr/lib; then
         libdirs=-L${libdir}
      fi
      if [ -n "$omplibs" ]; then
         split_multiple_lib_path $omplibs
         omplibs=$found_libs
      fi
      libs="$bdmlibs $(root-config --libs) $omplibs"
      out="$out $libdirs $libs"
      ;;
    --bindir)
      ### output the executable directory
      out="$out $bindir"
      ;;
    --libdir)
      ### output the library directory
      out="$out $libdir"
      ;;
    --incdir)
      ### output the header directory
      out="$out $incdir"
      ;;
    --cmakedir)
      ### output the tutorials directory
      out="$out $cmakedir"
      ;;
    --cmake-invoke)
      ### BioDynaMo cmake incovation
      out="$out $cmakeinvoke"
      ;;
    --config)
      ### output the configure arguments
      out="$out $configargs"
      ;;
    --debug)
      ### set debug compile options
      cxxdebflags=$cxxflagsdebug
      ;;
    --opt)
      ### set optimization compile options
      cxxoptflags=$cxxflagsrelease
      ;;
    --ncpu)
      ### number of available cores
      ncpu=1
      case $arch in
      freebsd* | openbsd* | linux*)
         ncpu=$(awk '/^processor/ {++n} END {print n}' /proc/cpuinfo)
         ;;
      macosx*)
         ncpu=$(sysctl -n hw.ncpu)
         ;;
      aix*)
         ncpu=$(prtconf | grep 'Number Of Processors' | awk '{ print $4 }')
         ;;
      solaris*)
         ncpu=$(kstat cpu_info | grep core_id | awk '{ print $2}' | uniq | wc -l)
         ;;
      *)
         ;;
      esac
      out="$out $ncpu"
      ;;
    --cxx)
      ### output used C++ compiler
      out="$out $cxx"
      ;;
    --ld)
      ### output used Linker
      out="$out $ld"
      ;;
    --fp-precision)
      ### output floating-point precision of BioDynaMo
      out="$out $fpprecision"
      ;;
    --help)
      ### Print a help message
      echo "Usage: `basename $0` [options]"
      echo ""
      echo "  --arch                Print the architecture (compiler/OS)"
      echo "  --platform            Print the platform (OS)"
      echo "  --debug               Set build type to debug (must precede cxxflags and ldflags)"
      echo "  --opt                 Set build type to opt (can be combined with debug)"
      echo "  --cxxflags            Print compiler flags and header path"
      echo "  --cxxincludes         Print only header paths (subset of cxxflags)"
      echo "  --ldflags             Print linker flags"
      echo "  --libs                Print BioDynaMo libraries"
      echo "  --cmakedir            Print BioDynaMo cmake directory"
      echo "  --bindir              Print the executable directory"
      echo "  --libdir              Print the library directory"
      echo "  --incdir              Print the header directory"
      echo "  --cmake-invoke        Print the BioDynaMo cmake invocation"
      echo "  --config              Print the cmake configuration options"
      echo "  --version             Print the BioDynaMo version"
      echo "  --root-version        Print the version of ROOT used to build BioDynaMo"
      echo "  --ncpu                Print number of available (hyperthreaded) cores"
      echo "  --cxx                 Print alternative C++ compiler specified when BDM was built"
      echo "  --ld                  Print alternative Linker specified when BDM was built"
      echo "  --fp-precision        Print the floating-point precision that  BDM was built with"
      echo "  --help                Print this message"
      exit 0
      ;;
    *)
      ### Give an error
      echo "Unknown argument \"$1\"!" 1>&2
      echo "${usage}" 1>&2
      exit 1
      ;;
  esac
  shift
done

### Output the stuff
echo $out
