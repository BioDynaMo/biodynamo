#!/usr/bin/env python3
# -----------------------------------------------------------------------------
#
# Copyright (C) 2021 CERN & University of Surrey for the benefit of the
# BioDynaMo collaboration. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
#
# See the LICENSE file distributed with this work for details.
# See the NOTICE file distributed with this work for additional information
# regarding copyright ownership.
#
# -----------------------------------------------------------------------------

# This script generates BioDynaMo dictionaries

import argparse
import os

# This header starts the BioDynaMo dictionary files.
bdm_dictionary_header = """
// -----------------------------------------------------------------------------
//
// Copyright (C) 2021 CERN & University of Surrey for the benefit of the
// BioDynaMo collaboration. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
//
// See the LICENSE file distributed with this work for details.
// See the NOTICE file distributed with this work for additional information
// regarding copyright ownership.
//
// -----------------------------------------------------------------------------
//
// BioDynaMo dictionary.
// This file was generated.
// Do NOT change it. 
// Changes will be lost the next time this file is generated.
//
// -----------------------------------------------------------------------------

#include "core/util/jit.h"
#include <cstdlib>
#include <sstream>
namespace {

void AppendEnvVar(std::stringstream& s, const char* var_name,
                  const char* suffix) {
  auto val = std::getenv(var_name);
  if (val) {
    s << val << suffix << ":";
  }
}

static struct BioDynaMoDictInit {
  BioDynaMoDictInit() {
    std::stringstream idirs; 
"""

# This footer concludes the BioDynaMo dictionary files.
bdm_dictionary_footer = """
    AppendEnvVar(idirs, "ROOT_INCLUDE_PATH", "");
    setenv("ROOT_INCLUDE_PATH", idirs.str().c_str(), true);
  }
} bdm_dict_initializer;

}

  
"""


def AppendPrefix(prefix, prefixes):
    if prefix.endswith("/"):
        prefixes.append(prefix)
    else:
        prefixes.append("{}/".format(prefix))


def RemoveLongestPrefix(search, prefixes):
    lengths = [len(prefix) for prefix in prefixes if search.startswith(prefix)]
    if lengths:
        return search[max(lengths) :]
    else:
        return search


def ReplaceSpecialPaths(include_dir, environmentals):
    for e in environmentals:
        path = os.getenv(e)
        if path == None:
            continue
        if not path.endswith("/"):
            path = "{}/".format(path)
        if include_dir.startswith(path):
            return 'std::getenv("{0}") << "/{1}"'.format(
                e, include_dir[len(path) :]
            )
    return '"{}"'.format(include_dir)


def FilterIncludeDirectories(include_dir):
    """
    Function is supposed to be used together with Pythons filter() function.
    It returns false if the include_dir should be ignored.
    """
    # Ignore includes of type ../biodynamo/[src,test,third_party]
    global args
    bdm_ignore_dirs = ["src", "test", "third_party", ""]
    if include_dir.startswith(args.bdm_source):
        folder = include_dir[len(args.bdm_source) :].lstrip("/").split("/")[0]
        if folder in bdm_ignore_dirs:
            return False
    # Ignore includes of type ../biodynamo/build/[version,omp,...]
    bdm_build_ignore_dirs = [
        "version",
        "omp",
        "opencl",
        "extracted-third-party-libs",
        "",
    ]
    bdm_build = "/".join([args.bdm_source, "build"])
    if include_dir.startswith(bdm_build):
        folder = include_dir[len(bdm_build) :].lstrip("/").split("/")[0]
        if folder in bdm_build_ignore_dirs:
            return False
    # Ignore includes coming from ROOTSYS
    root_sys = os.getenv("ROOTSYS")
    if root_sys is not None:
        if include_dir.startswith(root_sys):
            return False
    return True


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        prog="bdm-dictionary",
        description="This script generates the biodynamo c++ dictionary file.",
        epilog="",
    )

    parser.add_argument(
        "--output",
        action="store",
        type=str,
        required=True,
        help="Filename of the bdm dictionary that will be generated.",
    )
    parser.add_argument(
        "--out-of-source",
        action="store_true",
        help="Generate bdm dictionary for an out-of-source build. e.g. a simulation.",
    )
    parser.add_argument(
        "--bdm-source",
        action="store",
        type=str,
        required=False,
        help="Source directory of BioDynaMo for bdm build.",
    )
    parser.add_argument(
        "--include-dirs",
        nargs="+",
        type=str,
        required=True,
        help="At least one directory that contains the header files.",
    )
    parser.add_argument(
        "--headers",
        nargs="+",
        type=str,
        required=True,
        help="At least one header file containing biodynamo definitions.",
    )

    args = parser.parse_args()

    with open(args.output, "w") as f:
        f.write(bdm_dictionary_header)

        prefixes = []
        environmentals = ["ParaView_DIR", "ROOTSYS", "BDMSYS"]
        if not args.out_of_source:
            include_suffix = ["/include/paraview-5.9", "/include", "/include"]
            cnt = 0
            # default includes
            for e in environmentals:
                f.write(
                    '    AppendEnvVar(idirs, "{0}", "{1}");\n'.format(
                        e, include_suffix[cnt]
                    )
                )
                cnt = cnt + 1
            for id in args.include_dirs:
                if id.startswith("{}/{}".format(args.bdm_source, "demo")):
                    bdmsys_subdir = id.replace(args.bdm_source, "")
                    f.write(
                        '    AppendEnvVar(idirs, "{0}", "{1}");\n'.format(
                            "BDMSYS", bdmsys_subdir
                        )
                    )
                elif id.startswith(
                    "{}/{}".format(args.bdm_source, "benchmark")
                ):
                    f.write(
                        '    AppendEnvVar(idirs, "{0}", "{1}");\n'.format(
                            "BDMSYS", "/benchmark"
                        )
                    )
                AppendPrefix(id, prefixes)

            # External includes.
            # This part is necessary for external includes (e.g. mfem) to be
            # found by rootcling.
            external_includes = list(args.include_dirs)
            external_includes = list(
                filter(FilterIncludeDirectories, external_includes)
            )
            for external_include in external_includes:
                f.write('    idirs << "{}" << ":";\n'.format(external_include))
        else:
            for e in environmentals:
                env = os.getenv(e)
                if env != None:
                    AppendPrefix(env, prefixes)
            for id in args.include_dirs:
                id_processed = ReplaceSpecialPaths(id, environmentals)
                if id_processed != "":
                    AppendPrefix(id, prefixes)
                    f.write('    idirs << {0} << ":";\n'.format(id_processed))

        for h in args.headers:
            f.write(
                '    bdm::JitHeaders::Register("{0}");\n'.format(
                    RemoveLongestPrefix(h, prefixes)
                )
            )

        f.write(bdm_dictionary_footer)
