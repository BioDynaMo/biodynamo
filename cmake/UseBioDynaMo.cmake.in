# -----------------------------------------------------------------------------
#
# Copyright (C) The BioDynaMo Project.
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
#
# See the LICENSE file distributed with this work for details.
# See the NOTICE file distributed with this work for additional information
# regarding copyright ownership.
#
# -----------------------------------------------------------------------------
# This file contains the build setup for simulation projects outside the
# biodynamo repository
# Usage:
#   find_package(BioDynaMo REQUIRED)
#   include(${BDM_USE_FILE})
#   bdm_add_executable(...)
# -----------------------------------------------------------------------------

set(policy_new CMP0072 CMP0057 CMP0077)
foreach(policy ${policy_new})
  if(POLICY ${policy})
    cmake_policy(SET ${policy} NEW)
  endif()
endforeach()

# Add our CMake files (e.g. FindXXX.cmake files) to the module path, so that out
# of source build can find them
get_filename_component(CMAKE_DIR ${BDM_USE_FILE} DIRECTORY)
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_DIR})
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "$ENV{BDM_INSTALL_DIR}/biodynamo/cmake/")

# Add utils and other methods needed
include(utils)

# Option set when biodynamo was built
SET(cuda_default @cuda@)
SET(opencl_default @opencl@)
SET(dict_default @dict@)
SET(paraview_default @paraview@)
SET(sbml_default @sbml@)
SET(vtune_default @vtune@)
SET(tcmalloc_default @tcmalloc@)
SET(jemalloc_default @jemalloc@)

# Options. Turn on with 'cmake -Dmyvarname=ON'.
option(cuda      "Enable CUDA code generation for GPU acceleration" @cuda@)
option(opencl    "Enable OpenCL code generation for GPU acceleration" @opencl@)
option(dict      "Build with ROOT dictionaries" @dict@)
option(paraview  "Enable ParaView" @paraview@)
option(sbml      "Enable SBML support" @sbml@)
option(vtune     "Enable VTune performance analysis" @vtune@)
option(tcmalloc  "Use tcmalloc." @tcmalloc@)
option(jemalloc  "Use jemalloc." @jemalloc@)

if (cuda AND NOT cuda_default)
    MESSAGE(FATAL_ERROR "One of the option which you provided (-Dcuda=${cuda}) is not compatible with \
BioDynaMo. BioDynaMo was built by setting -Dcuda to ${cuda_default}. Please change -Dcuda to -Dcuda=${cuda_default}.")
endif()
if (opencl AND NOT opencl_default)
    MESSAGE(FATAL_ERROR "One of the option which you provided (-Dopencl=${opencl}) is not compatible with \
BioDynaMo. BioDynaMo was built by setting -Dopencl to ${opencl_default}. Please change -Dopencl to -Dopencl=${opencl_default}.")
endif()
if (dict AND NOT dict_default)
    MESSAGE(FATAL_ERROR "One of the option which you provided (-Ddict=${dict}) is not compatible with \
BioDynaMo. BioDynaMo was built by setting -Ddict to ${dict_default}. Please change -Ddict to -Ddict=${dict_default}.")
endif()
if (paraview AND NOT paraview_default)
    MESSAGE(FATAL_ERROR "One of the option which you provided (-Dparaview=${paraview}) is not compatible with \
BioDynaMo. BioDynaMo was built by setting -Dparaview to ${paraview_default}. Please change -Dparaview to -Dparaview=${paraview_default}.")
endif()
if (sbml AND NOT sbml_default)
    MESSAGE(FATAL_ERROR "One of the option which you provided (-Dsbml=${sbml}) is not compatible with \
BioDynaMo. BioDynaMo was built by setting -Dsbml to ${sbml_default}. Please use -Dsbml=${sbml_default}.")
endif()
if (vtune AND NOT vtune_default)
    MESSAGE(FATAL_ERROR "One of the option which you provided (-Dvtune=${vtune}) is not compatible with \
BioDynaMo. BioDynaMo was built by setting -Dvtune to ${vtune_default}. Please change -Dvtune to -Dvtune=${vtune_default}.")
endif()
string(TOLOWER "${tcmalloc}" tcmalloc_lower )
string(TOLOWER "${tcmalloc_default}" tcmalloc_default_lower )
if (NOT "${tcmalloc_lower}" STREQUAL "${tcmalloc_default_lower}")
    MESSAGE(FATAL_ERROR "One of the option which you provided (-Dtcmalloc=${tcmalloc}) is not compatible with \
BioDynaMo. BioDynaMo was built by setting -Dtcmalloc to ${tcmalloc_default}. Please change -Dtcmalloc to -Dtcmalloc=${tcmalloc_default}.")
endif()
string(TOLOWER "${jemalloc}" jemalloc_lower )
string(TOLOWER "${jemalloc_default}" jemalloc_default_lower )
if (NOT "${jemalloc_lower}" STREQUAL "${jemalloc_default_lower}")
    MESSAGE(FATAL_ERROR "One of the option which you provided (-Djemalloc=${jemalloc}) is not compatible with \
BioDynaMo. BioDynaMo was built by setting -Djemalloc to ${jemalloc_default}. Please change -Djemalloc to -Djemalloc=${jemalloc_default}.")
endif()

# This file contains the build setup for simulation projects outside the
# biodynamo repository
# Usage:
#   find_package(BioDynaMo REQUIRED)
#   include(${BDM_USE_FILE})
#   bdm_add_executable(...)

if(UNIX AND NOT APPLE)
  set(LINUX TRUE)
endif()

if(DEFINED ENV{BDMSYS})
    set(BDMSYS $ENV{BDMSYS})
    add_definitions(-DBDMSYS=\"$ENV{BDMSYS}\")
else()
  execute_process(COMMAND rm -rf ${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles)
  message(FATAL_ERROR "The BioDynaMo environment is not set up correctly. Please execute 'source <path-to-bdm-installation>/bin/thisbdm.sh' and retry this command.")
endif()

# -------------------- find packages ------------------------------------------
if (tcmalloc)
  find_package(tcmalloc)
  if(NOT TCMALLOC_FOUND)
    message(FATAL_ERROR "TCMalloc not found.")
  endif()
  message("Tcmalloc libarary found: ${TCMALLOC_LIBRARY_PATH}")
  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -ltcmalloc -L ${TCMALLOC_LIBRARY_PATH}")
  set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -ltcmalloc -L ${TCMALLOC_LIBRARY_PATH}")
endif()
if (jemalloc)
  find_package(jemalloc)
  if(NOT JEMALLOC_FOUND)
    message(FATAL_ERROR "jemalloc not found.")
  endif()
  message("jemalloc libarary found: ${JEMALLOC_LIBRARY_DIR}")
  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -ljemalloc -L ${JEMALLOC_LIBRARY_DIR}")
  set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -ljemalloc -L ${JEMALLOC_LIBRARY_DIR}")
endif()

find_program(WGET_BIN wget)
if (NOT WGET_BIN)
  message(FATAL_ERROR "The program wget was not found in your system. Please run ./prerequisites.sh again before calling cmake.")
endif()

find_package(MPI)

find_package(OpenMP REQUIRED)

if (OpenMP_FOUND)
  get_filename_component(OpenMP_CXX_LIB_DIR "${OpenMP_CXX_LIBRARIES}" DIRECTORY)
  link_directories(${OpenMP_CXX_LIB_DIR})
endif()

find_package(Git)

if(cuda)
  find_package(CUDA)
endif()

if(opencl)
  find_package(OpenCL)
endif()

if (paraview)
    find_package(GLUT)
endif()

find_package(Numa REQUIRED)
if (NUMA_FOUND)
   include_directories(${NUMA_INCLUDE_DIR})
   link_directories(${NUMA_LIBRARY_DIR})
   add_definitions("-DUSE_NUMA")
   set(BDM_REQUIRED_LIBRARIES ${BDM_REQUIRED_LIBRARIES} ${NUMA_LIBRARIES})
endif()

if(paraview)
  find_package(ParaView 5.3 QUIET OPTIONAL_COMPONENTS vtkPVPythonCatalyst)
  if(${ParaView_FOUND})
    message(STATUS "Found ParaView")
  else()
    message(WARNING "ParaView not found")
    set(paraview OFF CACHE "Build with ParaView support." BOOL)
  endif()
endif()

find_package(ROOT REQUIRED COMPONENTS Geom Gui Eve GenVector)
verify_root()
if (dict)
  add_definitions("-DUSE_DICT")
endif()

if (vtune)
    find_package(VTune)
    if(${VTune_FOUND})
        include_directories(${VTUNE_INCLUDE_DIR})
        add_definitions("-DUSE_VTUNE")
        set(BDM_REQUIRED_LIBRARIES ${BDM_REQUIRED_LIBRARIES} ${VTUNE_LIBRARIES})
    else()
        message(WARNING "VTune not found")
        SET(vtune OFF)
    endif()
endif()

if(sbml)
  if(APPLE)
    message(FATAL_ERROR "Currently SBML is not supported on MacOS (see https://trello.com/c/vKPbh4iG).")
  endif()
  find_package(Libroadrunner REQUIRED)
  add_definitions(${Libroadrunner_DEFINITIONS})
  include_directories(${Libroadrunner_INCLUDE_DIRS})
  link_directories(${Libroadrunner_LINK_DIRS})
  set(BDM_REQUIRED_LIBRARIES ${BDM_REQUIRED_LIBRARIES} ${Libroadrunner_LINK_LIBRARIES})
endif()

# Link to OpenCL
if (OPENCL_FOUND)
  if (OPENCL_HAS_CXX)
    add_definitions("-DUSE_OPENCL")
    set(BDM_REQUIRED_LIBRARIES ${BDM_REQUIRED_LIBRARIES} ${OPENCL_LIBRARIES})
  else()
    message(WARNING "OpenCL C++ bindings not found. Please install to make use of OpenCL. "
      "If you think you have installed the C++ bindings correctly, please check if one "
      "of the following environmentals is set correctly (vendor specific):
      - AMD: \t\tAMDAPPSDKROOT
      - NVIDIA: \tCUDA_PATH
      - INTEL: \tINTELOPENCLSDK")
    set(OPENCL_FOUND FALSE)
  endif()
endif()

if (CUDA_FOUND)
  add_definitions("-DUSE_CUDA")
  include_directories(${CUDA_INCLUDE_DIRS} ${CUDA_TOOLKIT_ROOT_DIR})
  set(BDM_REQUIRED_LIBRARIES ${BDM_REQUIRED_LIBRARIES} ${CUDA_LIBRARIES})
  set(BDM_REQUIRED_LIBRARIES ${BDM_REQUIRED_LIBRARIES} bdmcuda)
endif()

find_package(ClangTools)
if (NOT ClangTools_FOUND)
    message(WARNING "clang-tidy and clang-format were not found. Style checks will not be available for this simulation.")
else()
    if ("$ENV{CMAKE_EXPORT_COMPILE_COMMANDS}" STREQUAL "1" OR CLANG_TIDY_FOUND)
      # Generate a Clang compile_commands.json "compilation database" file for use
      # with various development tools, such as Vim's YouCompleteMe plugin.
      # See http://clang.llvm.org/docs/JSONCompilationDatabase.html
      set(CMAKE_EXPORT_COMPILE_COMMANDS 1)
    endif()
    # It is used by format/style checks. It needs to be defined here such
    # to enable relocation of the scripts.
    set(BUILD_SUPPORT_DIR "${BDMSYS}/share/util")
    include(CppStyleGuideChecks)
endif()

# -------------------- set default build type and compiler flags ---------------
if(NOT CMAKE_CONFIGURATION_TYPES AND NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE Release)
endif()
include("${BDMSYS}/share/cmake/SetCompilerFlags.cmake")

# -------------------- set rpath options ---------------------------------------
# When building, use the RPATH
set(CMAKE_SKIP_BUILD_RPATH TRUE)           # don't skip the full RPATH for the build tree
set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)
set(CMAKE_INSTALL_RPATH_USE_LINK_PATH FALSE)
set(CMAKE_INSTALL_RPATH "")

# -------------------- includes -----------------------------------------------
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${BDMSYS}/share/cmake")
include("${BDMSYS}/share/cmake/BioDynaMo.cmake")
include(${ROOT_USE_FILE})

fix_rootcling_omp_issue()

# FIXME
list(REMOVE_ITEM ROOT_LIBRARIES "$ENV{BDMSYS}/third_party/root/lib/libEve.so")
set(BDM_REQUIRED_LIBRARIES ${BDM_REQUIRED_LIBRARIES} biodynamo ${ROOT_LIBRARIES})

include_directories("$ENV{BDMSYS}/include")
link_directories("$ENV{BDMSYS}/lib")
