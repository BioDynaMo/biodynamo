# Runs the installation tests and valgrind tests in the following cases:
#   1) every day at 3 am
#   2) a pull request to the master branch

name: Ubuntu System CI

on:
  schedule:
    # Every day at 3 am
    - cron: '0 3 * * *'
  pull_request:
    # Upon pull requests
    branches:
      - master

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04]
    runs-on: ${{ matrix.os }}

    steps:
    - name: Set GHA_BRANCH_NAME
      run: |
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "GHA_BRANCH_NAME=${{ github.head_ref }}" >> $GITHUB_ENV
        fi
        if [ "${{ github.event_name }}" = "schedule" ]; then
          echo "GHA_BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
        fi

    - name: Set OSVERS
      run: |
        ID=$(grep -oP '(?<=^ID=).+' /etc/os-release | tr -d '"')
        VERSION=$(grep -oP '(?<=^VERSION_ID=).+' /etc/os-release | tr -d '"')
        echo "OSVERS=$ID-$VERSION" >> $GITHUB_ENV

    - name: Start Xvfb
      run: |
        set -e
        sudo apt update
        sudo apt-get -y install xvfb
        XVFBARGS=":99 -ac -screen 0 2560x1440x24"
        /usr/bin/Xvfb $XVFBARGS >> /tmp/Xvfb.out 2>&1 &
        disown -ar
        sleep 3

    - name: Install BioDynaMo
      shell: bash
      run: |
        sudo apt update
        sudo apt install -y curl
        curl https://raw.githubusercontent.com/BioDynaMo/biodynamo/${GHA_BRANCH_NAME}/util/install | bash

    - name: Checkout BioDynaMo
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Set INSTALL_DIR
      run: |
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "INSTALL_DIR=${GITHUB_WORKSPACE}/build" >> $GITHUB_ENV
        fi
        if [ "${{ github.event_name }}" = "schedule" ]; then
          echo "INSTALL_DIR=$(echo ${HOME}/biodynamo-*)" >> $GITHUB_ENV
        fi

    - name: Cache pyenv
      uses: actions/cache@v2
      id: pyenv-cache
      with:
        path: ~/.pyenv
        key: ${{ env.OSVERS }}-pyenv-3.8.0

    - name: Install pyenv dependency
      if: steps.pyenv-cache.outputs.cache-hit != 'true'
      run: |
        if [ ! -f "$HOME/.pyenv/bin/pyenv" ]; then
          curl https://pyenv.run | bash
        fi
        export PATH="$HOME/.pyenv/bin:$PATH"
        eval "$(pyenv init -)"
        PYTHON_CONFIGURE_OPTS="--enable-shared" pyenv install 3.8.0
        pyenv shell 3.8.0

    - name: Cache Third Party Packages
      uses: actions/cache@v2
      with:
        path: build/third_party
        key: ${{ env.OSVERS }}-third-party-${{ hashFiles('cmake/external/SHA256Digests.cmake') }}

    # Don't do this in the `Build BioDynaMo step`, because notebooks might time out in GHA
    # runners, while waiting for other targets to be compiled
    - name: Run notebooks
      shell: bash
      run: |
        cmake \
          -Dnotebooks=ON \
          -Dsbml=ON \
          -DCMAKE_BUILD_TYPE=Release \
          -B build
        cmake --build build --parallel --config Release --target notebooks
      if: github.event_name == 'pull_request'

    - name: Build BioDynaMo
      shell: bash
      run: |
        cmake \
          -Dnotebooks=OFF \
          -Dparaview=ON \
          -Dsbml=ON \
          -DCMAKE_BUILD_TYPE=Release \
          -B build
        cmake --build build --config Release

    - name: Run valgrind and system tests
      shell: bash
      working-directory: build
      run: |
        . $INSTALL_DIR/bin/thisbdm.sh
        sudo git config --system user.name "Test User"
        sudo git config --system user.email user@test.com
        export DISPLAY=:99.0
        biodynamo new test-sim
        . ../test/util.inc
        run_cmake_simulation test-sim
        make run-valgrind
        make run-demos

    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        fields: workflow,job,commit,repo,ref,author,took,message
        custom_payload: |
          {
            username: 'GitHub CI',
            icon_emoji: ':octocat:',
            attachments: [{
              color: '${{ job.status }}' === 'success' ? 'good' : '${{ job.status }}' === 'failure' ? 'danger' : 'warning',
              text: `${process.env.AS_WORKFLOW}\n${process.env.AS_JOB} (${process.env.AS_COMMIT}) of ${process.env.AS_REPO}@${process.env.AS_REF} by ${process.env.AS_AUTHOR} ${{ job.status }} in ${process.env.AS_TOOK}\n${process.env.AS_MESSAGE}`
            }]
          }
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        MATRIX_CONTEXT: ${{ toJson(matrix) }} # Required when using matrix
      # Notify Slack step should run when the following holds true:
      #   * One of the previous steps 1) succeeded, 2) failed, or 3) was cancelled
      #   * This workflow is triggered from our base repository (i.e. forked PRs don't
      #     have the right to push Slack message to our channel)
      if: ${{ ( failure() || success() || cancelled() ) && ( github.event.pull_request.head.repo.full_name == github.event.pull_request.base.repo.full_name ) }}
